// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract StonerPunkzOnMatic is ERC721Enumerable, Ownable {
    using Strings for uint256;
    string public baseURI; // baseUri for all tokenIds
    string public baseExtension = ".json"; // extension for baseURI
    
    struct RoyaltyInfo {
        address[] _receiver;
        uint96[] _share;
    }
    RoyaltyInfo private _defaultRoyaltyInfo;
    constructor(
        string memory _name,
        string memory _symbol,
        string memory _initBaseURI,
        address[] memory _receiver,
        uint96[] memory _share
    ) ERC721(_name, _symbol) {
        setDefaultRoyalty(_receiver, _share);
        setBaseURI(_initBaseURI);
    }

    // Mint function to be called by onlyOwner
    function mint(uint256 _mintAmount) public onlyOwner {
        uint256 supply = totalSupply();
        for (uint256 i = 1; i <= _mintAmount; i++) {
            _safeMint(msg.sender, supply + i);
        }
    }

    // Function return tokenIds metadata URI
    // retruns tokenId uri used by marketed places api to fetch metadata
    function tokenURI(
        uint256 _tokenId
    ) public view virtual override returns (string memory) {
        require(
            _exists(_tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        string memory currentBaseURI = _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        _tokenId.toString(),
                        baseExtension
                    )
                )
                : "";
    }

    // internal
    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function setBaseURI(string memory _newBaseURI) public onlyOwner {
        baseURI = _newBaseURI;
    }

    function setBaseExtension(
        string memory _newBaseExtension
    ) public onlyOwner {
        baseExtension = _newBaseExtension;
    }

    /**
     * Override isApprovedForAll to auto-approve N3st3D proxy contract
     */
    function isApprovedForAll(address _owner, address _operator)
        public
        view
        override(ERC721)
        returns (bool isOperator)
    {
        // if N3st3D  ERC721 Proxy Address is detected, auto-return true
        if (_operator == address(0x6B9a5BcaD8133bd08484103C8007fa105FE8460b)) {
            return true;
        }
        // otherwise, use the default ERC721.isApprovedForAll()
        return ERC721.isApprovedForAll(_owner, _operator);
    }
    
    // Function Set default Royality For the Whole Collection max fee limit is set to 10%
    function setDefaultRoyalty(
        address[] memory receiver,
        uint96[] memory share
    ) public onlyOwner {
        require(
            verifyReceiver(receiver) == false,
            "Receiver Address is Invalid"
        );
        require(
            verifyShare(share) <= 1000,
            "Total Share Value should be less then or equal to 1000 bips max limit is 10%"
        );
        require(
            receiver.length == share.length,
            "Invalid info Receiver and share length not equal"
        );
        _defaultRoyaltyInfo = RoyaltyInfo(receiver, share);
    }

    //internal function verifys valid recivers address
    function verifyReceiver(
        address[] memory _receiver
    ) internal pure returns (bool checked) {
        for (uint96 i = 0; i < _receiver.length; i + 1) {
            if (_receiver[i] != address(0)) {
                return false;
            }
        }
        return false;
    }

    //internal funcations verifys share value of dose not exceed 10%
    function verifyShare(
        uint96[] memory _share
    ) internal pure returns (uint96 share) {
        uint96 res = 0;
        for (uint96 i = 0; i < _share.length; i++) {
            res += _share[i];
        }
        return res;
    }

    // Function lets other marketplace know this contract support Royalties
    function supportsInterface(
        bytes4 interfaceId
    ) public view override(ERC721Enumerable) returns (bool) {
        return
            interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);
    }
}
